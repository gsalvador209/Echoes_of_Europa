//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Controllers/Player_input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Player_input: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Player_input()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player_input"",
    ""maps"": [
        {
            ""name"": ""ControlesPersonaje"",
            ""id"": ""f2aad241-ca13-40d6-bcf8-388972dd6d7c"",
            ""actions"": [
                {
                    ""name"": ""Mover"",
                    ""type"": ""Value"",
                    ""id"": ""3e378078-d0d3-4a7d-8352-0b485074f244"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""d3eca5f4-5b00-407e-8249-534fe6172500"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""dd449e24-a3ba-4d9f-aa3e-c6ddedb09f92"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mover"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""72c52f43-7256-4a0e-bb46-38a8740d0f12"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mover"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0275c09d-1a03-428f-975b-adf403635d10"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mover"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""27fdc75c-dfdb-48a5-9488-23807bd4f621"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mover"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""529995cd-b998-4034-9ba0-b5bba10c1116"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mover"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f443ce79-2cad-4fd2-93d4-e1e6df86f61c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mover"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b7ad6f2b-9389-4bcc-a6b7-e5b5a6910207"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1d3b3966-5235-4864-8dd0-98d4fea5048c"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ControlesPersonaje
        m_ControlesPersonaje = asset.FindActionMap("ControlesPersonaje", throwIfNotFound: true);
        m_ControlesPersonaje_Mover = m_ControlesPersonaje.FindAction("Mover", throwIfNotFound: true);
        m_ControlesPersonaje_Run = m_ControlesPersonaje.FindAction("Run", throwIfNotFound: true);
    }

    ~@Player_input()
    {
        UnityEngine.Debug.Assert(!m_ControlesPersonaje.enabled, "This will cause a leak and performance issues, Player_input.ControlesPersonaje.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ControlesPersonaje
    private readonly InputActionMap m_ControlesPersonaje;
    private List<IControlesPersonajeActions> m_ControlesPersonajeActionsCallbackInterfaces = new List<IControlesPersonajeActions>();
    private readonly InputAction m_ControlesPersonaje_Mover;
    private readonly InputAction m_ControlesPersonaje_Run;
    public struct ControlesPersonajeActions
    {
        private @Player_input m_Wrapper;
        public ControlesPersonajeActions(@Player_input wrapper) { m_Wrapper = wrapper; }
        public InputAction @Mover => m_Wrapper.m_ControlesPersonaje_Mover;
        public InputAction @Run => m_Wrapper.m_ControlesPersonaje_Run;
        public InputActionMap Get() { return m_Wrapper.m_ControlesPersonaje; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControlesPersonajeActions set) { return set.Get(); }
        public void AddCallbacks(IControlesPersonajeActions instance)
        {
            if (instance == null || m_Wrapper.m_ControlesPersonajeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ControlesPersonajeActionsCallbackInterfaces.Add(instance);
            @Mover.started += instance.OnMover;
            @Mover.performed += instance.OnMover;
            @Mover.canceled += instance.OnMover;
            @Run.started += instance.OnRun;
            @Run.performed += instance.OnRun;
            @Run.canceled += instance.OnRun;
        }

        private void UnregisterCallbacks(IControlesPersonajeActions instance)
        {
            @Mover.started -= instance.OnMover;
            @Mover.performed -= instance.OnMover;
            @Mover.canceled -= instance.OnMover;
            @Run.started -= instance.OnRun;
            @Run.performed -= instance.OnRun;
            @Run.canceled -= instance.OnRun;
        }

        public void RemoveCallbacks(IControlesPersonajeActions instance)
        {
            if (m_Wrapper.m_ControlesPersonajeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IControlesPersonajeActions instance)
        {
            foreach (var item in m_Wrapper.m_ControlesPersonajeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ControlesPersonajeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ControlesPersonajeActions @ControlesPersonaje => new ControlesPersonajeActions(this);
    public interface IControlesPersonajeActions
    {
        void OnMover(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
    }
}
